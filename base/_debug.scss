// scss-lint:disable ColorKeyword, QualifyingElement, SingleLinePerSelector

@if $ekzo-debug-mode {

	/*------------------------------------*\
		$DEBUG
	\*------------------------------------*/

	/**
	 * Enable this stylesheet to visually detect any improperly nested or
	 * potentially invalid markup, or any potentially inaccessible code.
	 *
	 * Red          ==      definite error
	 * Yellow       ==      double-check
	 * None         ==      should be fine
	 *
	 * Please note that this method of checking markup quality should not be relied
	 * upon entirely. Validate your markup!
	 */


	/**
	 * Are there any empty elements in your page?
	 */

	:empty {
		outline: 5px solid yellow;
	}


	/**
	 * Images require `alt` attributes, empty `alt`s are fine but should be
	 * double-checked, no `alt` is bad and is flagged red.
	 */

	img {
		outline: 5px solid red;
	}
	img[alt] {
		outline: none;
	}
	img[alt=''] {
		outline: 5px solid yellow;
	}


	/**
	 * Links sometimes, though not always, benefit from `title` attributes. Links
	 * without are never invalid but it's a good idea to check.
	 */

	a {
		outline: 5px solid yellow;
	}
	a[title] {
		outline: none;
	}


	/**
	 * Double-check any links whose `href` is something questionable.
	 */

	a[href='#'],
	a[href*='javascript'] {
		outline: 5px solid yellow;
	}


	/**
	 * The `target` attribute ain't too nice...
	 */

	a[target] {
		outline: 5px solid yellow;
	}


	/**
	 * Ensure any lists only contain `li`s as children.
	 */

	ul,
	ol {
		> *:not(li) {
			outline: 5px solid red;
		}
	}


	/**
	 * It's always nice to give `th`s `scope` attributes.
	 */

	th {
		outline: 5px solid yellow;
	}
	th[scope] {
		outline: none;
	}


	/**
	 * `tr`s as children of `table`s ain't great, did you need a `thead`/`tbody`?
	 */

	table > tr {
		outline: 5px solid yellow;
	}


	/**
	 * `tfoot` needs to come *before* `tbody`.
	 */

	tbody + tfoot {
		outline: 5px solid yellow;
	}


	/**
	 * Forms require `action` attributes
	 */

	form {
		outline: 5px solid red;
	}
	form[action] {
		outline: none;
	}


	/**
	 * Various form-field types have required attributes. `input`s need `type`
	 * attributes, `textarea`s need `rows` and `cols` attributes and submit buttons
	 * need a `value` attribute.
	 */

	textarea,
	input {
		outline: 5px solid red;
	}

	input[type] {
		outline: none;
	}

	textarea[rows][cols] {
		outline: none;
	}

	input[type=submit] {
		outline: 5px solid red;
	}

	input[type=submit][value] {
		outline: none;
	}


	/**
	 * Avoid inline styles where possible.
	 */

	[style] {
		outline: 5px solid yellow;
	}


	/**
	 * You should avoid using IDs for CSS, is this doing any styling?
	 */

	[id] {
		outline: 5px solid yellow;
	}


	/**
	 * Revenge Buttons CSS v 1.0
	 *
	 *	Showing errors in href and buttons markup
	 *
	 * Copyright 2013, Heydon Pickering: http://www.heydonworks.com
	 *
	 * Released under Attribution 3.0 Unported license - http://creativecommons.org/licenses/by/3.0/
	 *
	 * Please leave this comment block intact as attribution
	 *
	 * More info: http://coding.smashingmagazine.com/2013/08/20/semantic-css-with-intelligent-selectors/
	 */


	/**
	 * General styling
	 */

	a:not([href]), a[href=''], a[href$='#'], a[href^='javascript'],
	.button:not(button):not([role='button']):not([type='button']):not([type='submit']):not([type='reset']),
	.btn:not(button):not([role='button']):not([type='button']):not([type='submit']):not([type='reset']),
	a[class*='button']:not([role='button']),
	a[role='button']:not([href*='/']):not([href*='.']):not([href*='?']),
	a[role='button'][href=''], a[role='button'][href$='#'], a[role='button'][href^='javascript'],
	.button:not(button):not([role='button']):not(input),
	.btn:not(button):not([role='button']):not(input),
	a[class*='button']:not([role='button']),
	a.button[class*='disabled'],
	a.btn.disabled, a[class*='button'][class*='disabled'],
	form button:not([type]),
	a:empty:not([aria-label]):not([aria-labelledby]),
	button:empty:not([aria-label]):not([aria-labelledby]),
	button:not([aria-label]):not([aria-labelledby]) img:only-child:not([alt]),
	a:not([aria-label]):not([aria-labelledby]) img:only-child:not([alt]),
	.button:not(a):not(button):not(input),
	.btn:not(a):not(button):not(input) {
		overflow: visible !important;
	}

	a:not([href]):after, a[href='']:after, a[href$='#']:after, a[href^='javascript']:after,
	.button:not(button):not([role='button']):not([type='button']):not([type='submit']):not([type='reset']):after,
	.btn:not(button):not([role='button']):not([type='button']):not([type='submit']):not([type='reset']):after,
	a[class*='button']:not([role='button']):after,
	a[role='button']:not([href*='/']):not([href*='.']):not([href*='?']):after,
	a[role='button'][href='']:after, a[role='button'][href$='#']:after, a[role='button'][href^='javascript']:after,
	.button:not(button):not([role='button']):not(input):after,
	.btn:not(button):not([role='button']):not(input):after,
	a[class*='button']:not([role='button']):after,
	a.button[class*='disabled']:after,
	a.btn.disabled:after, a[class*='button'][class*='disabled']:after,
	form button:not([type]):after,
	a:empty:not([aria-label]):not([aria-labelledby]):after,
	button:empty:not([aria-label]):not([aria-labelledby]):after,
	button:not([aria-label]):not([aria-labelledby]) img:only-child:not([alt]):after,
	a:not([aria-label]):not([aria-labelledby]) img:only-child:not([alt]):after,
	.button:not(a):not(button):not(input):after,
	.btn:not(a):not(button):not(input):after {
		display: inline-block !important;
		background: pink !important;
		padding: .25em !important;
		font-family: 'comic sans ms', cursive !important;
		color: #000 !important;
		font-size: 16px !important;
		text-shadow: none !important;
		font-weight: normal !important;
		font-style: normal !important;
		line-height: 1.25 !important;
	}

	/**
	 * Button and hyperlink errors
	 */

	a:not([href]):after {
		content: 'Do you mean for this to be a link or a <button>? It does not link to anything!';
	}

	a[href='']:after, a[href$='#']:after, a[href^='javascript']:after {
		content: 'Do you mean for this to be a <button>? It is a link that does not go anywhere!';
	}

	.button:not(button):not([role='button']):not([type='button']):not([type='submit']):not([type='reset']):after,
	.btn:not(button):not([role='button']):not([type='button']):not([type='submit']):not([type='reset']):after,
	a[class*='button']:not([role='button']):after {
		content: 'If you are going to make it look like a button, make it a button, dammit!';
	}

	.button:not(a):not(button):not(input):after,
	.btn:not(a):not(button):not(input):after {
		content: 'You are not using a standard focusable element for your 'button'. Can keyboard users focus on it?';
	}

	a[role='button']:not([href*='/']):not([href*='.']):not([href*='?']):after,
	a[role='button'][href='']:after, a[role='button'][href$='#']:after, a[role='button'][href^='javascript']:after {
		content: 'Either use a proper href fallback or just use a button element.';
	}

	a.button[class*='disabled']:after,
	a.btn.disabled:after,
	a[class*='button'][class*='disabled']:after {
		content: 'You cannot disable a hyperlink. Use a button element with disabled='disabled'.';
	}

	[class*='toggle']:not([aria-pressed]) {
		content: 'If it is toggleable, you should supply an aria-pressed attribute';
	}

	form button:not([type]):after {
		content: 'Is this a submit button, a reset button or just a button? Use type='submit', type='reset' or type='button'';
	}

	a:empty:not([aria-label]):not([aria-labelledby]):after,
	button:empty:not([aria-label]):not([aria-labelledby]):after,
	button:not([aria-label]):not([aria-labelledby]) img:only-child:not([alt]):after,
	a:not([aria-label]):not([aria-labelledby]) img:only-child:not([alt]):after {
		content: 'All buttons and links should have text content, an image with alt text or an ARIA label';
	}


}// endif