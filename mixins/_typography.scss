
// =======================================
// ^MIXINS.TYPOGRAPHY
// =======================================


// ----
// Create a fully formed type style (sizing and vertical rhythm) by passing in a
// single value
// On contrary to `ekzo-font-size()` function, that mixin embending `font-size` and
// caluclated `line-height` into class, within which it was called
//
// @param {number|string} $size           - desired `font-size` in pixels or
//                                          font name, specified in default font sizes map
//                                          or specified one
// @param {string} $type=content            - group's name of font in default or specified map
//                                          should be specified only if `$size` set to string
// @param {bool=true|number} $line-height - should `line-height` rhythm calculation be applied or no.
//                                          Set to number in pixels to define custom
//                                          `line-height`.
// @param {map} $map=$ekzo-font-sizes     - should mixin search for font sizes in default,
//                                          or specified map
//                                          See `font-size-class()` mixin for details about format
//
// @example
//
//		.heading { @include ekzo-font-size(10px, 25px); }
//		.heading { @include ekzo-font-size(h1, headings); }
//		.heading { @include ekzo-font-size(big, my-group, $map:$my-custom-sizes); }
//
// Thanks to @redclov3r for the `line-height` Sass:
// twitter.com/redclov3r/status/250301539321798657

@mixin ekzo-font-size($size, $type:content, $line-height:true, $map:$ekzo-font-sizes) {

	$value: null;

	@if type-of($size) == string {

		$size: ekzo-font-size($size, $type, $map);

	}

	// ensure that we're working with pixels
	$size: $size + 0px;

	font-size: $size;

	// use custom line-height
	@if type-of($line-height) == number {

		// ensure that we're working with pixels
		$line-height: $line-height + 0px;

		line-height: ceil($size / $line-height) * ($line-height / $size);

	// or base value from predefined `$ekzo-line-height`
	} @else if $line-height {

		line-height: ceil($size / $ekzo-line-height) * ($ekzo-line-height / $size);

	}

}



// ----
// Iterate through specified or predefined map and build series of classes
// with font sizes based on specified in that map names and values
//
// @param {strng} $type          - name of group in specified map
// @param {strng} $name=false    - specific name of font-size which should be called
//                                 If specified, only 1 specified class will be outputed
// @param {bool=true|number} $line-height
//                               - should `line-height` rhythm calculation be applied or no.
//                                 Set to number in pixels to define custom
//                                 `line-height`.
// @param {boolean|'include'} $plain-class=false
//                               - whether class shouid be outputed as normal, or as
//                                 plain (like `h1`, without dot).
//                                 `include` parameter will include both
// @param {string} $prefix=null  - should class name be prefixed or no.
//                                 Plain class names won't be prefixed independantly from
//                                 that parameter
// @param {map} $map=$font-sizes - should mixin search for font sizes in default, or specified map
//                                 ```
//                                 		$example: (
//                                 			headings: (
//                                 				h1: 36px,
//                                 				h2: 30px,
//                                 			),
//                                 			extra-headings: (
//                                 				giga: 96px,
//                                 			)
//                                 		);
//                                 ```
//
// @example
//
//		@include ekzo-font-size-class(fonts, $plain-class:false, $prefix:'text--') { border: 1px; };
//

@mixin ekzo-font-size-class($type, $name:false, $line-height:true, $plain-class:false, $prefix:'', $map:$ekzo-font-sizes ) {

	$working-map: null;
	$class:       null;

	@if map-has-key($map, $type) {
		$working-map: map-get($map, $type);
	} @else {
		@error 'No such `#{$type}` font type in specified map!';
	}

	@if not $name {

		@each $name, $value in $working-map {

			@if $plain-class == include {
				$class: $name + ', .' + $prefix + $name;
			} @else if $plain-class {
				$class: $name;
			} @else {
				$class: '.' + $prefix + $name;
			}

			#{$class} {
				@include ekzo-font-size($value, $line-height:$line-height);
				@content
			}

		} //endeach

	} @else if $name and $type and map-has-key($working-map, $name) {

		$value: map-get($working-map, $name);

		@if $plain-class == include {
			$class: $name + ', .' + $prefix + $name;
		} @else if $plain-class {
			$class: $name;
		} @else {
			$class: '.' + $prefix + $name;
		}

		#{$class} {
			@include ekzo-font-size($value, $line-height:$line-height);
			@content
		}

	} @else {
		@error 'No such `#{$name}` font name in specified map!';
	}

}



// ----
// Bulding proper font-face based on provided parameters
//
// @param {string} $font                   - font name
// @param {number=1} $version              - font version. Ensure reloading of cache in
//                                           case of any changes in font file
// @param {string=$font} $file-name        - should be specified in case of different
//                                           font file name from font name
// @param {number|string=normal} $weight   - `font-weight` of font-face
// @param {string=normal} $style           - `font-style` of font-face
// @param {string=$file-name} $svg-id      - should be specified in case it's different
//                                           from font file name
//                                           (can be found in `svg-file -> <font> -> id`)
//
// @example
//
//		@include ekzo-font(Helvetica LT Condensed, 1, HelveticaLTCondensed, bold, helvId );
//

@mixin ekzo-font($font, $version:1, $file-name:$font, $weight:normal, $style:normal, $svg-id:$file-name) {

	@font-face {
		font-family: '#{$font}';

		src: url(#{$ekzo-fonts-path}/#{$file-name}.eot?#{$version});
		src: url(#{$ekzo-fonts-path}/#{$file-name}.eot?#{$version}#iefix)      format('embedded-opentype'),
			 url(#{$ekzo-fonts-path}/#{$file-name}.woff?#{$version})           format('woff'),
			 url(#{$ekzo-fonts-path}/#{$file-name}.ttf?#{$version})            format('truetype'),
			 url(#{$ekzo-fonts-path}/#{$file-name}.svg?#{$version}##{$svg-id}) format('svg');

		font-weight: $weight;
		font-style:  $style;
	}

	// Serving SVG font at first specially for Chrome to make it smoother
	//
	// @note Disabled because seems latest versions of Chrome doesn't have such issue

	// @media screen and (-webkit-min-device-pixel-ratio: 0) {
	// 	@font-face {
	// 		font-family: '#{$font}';
	// 		src: url(#{$ekzo-fonts-path}/#{$file-name}.svg?#{$version}##{$svg-id}) format('svg');
	// 	}
	// }

}