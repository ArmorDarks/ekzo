
// =======================================
// ^FUNCTIONS.MISC
// =======================================

// ---------------------------------------
// Convert Direction
// ---------------------------------------
//
// Takes a direction and returns the opposite
//
// @param {string} $direction - initial direction
//
// @return {string}

@function ekzo-flip-direction($direction) {
  @if $direction == 'top'         { @return 'bottom'; }
  @else if $direction == 'bottom' { @return 'top'; }
  @else if $direction == 'left'   { @return 'right'; }
  @else if $direction == 'right'  { @return 'left'; }
}

// ---------------------------------------
// Strip units
// ---------------------------------------
// Strip units from `$value`
//
// @param {Number} $value - Value from which should be removed units
//
// @return {number} - Number without units

@function ekzo-strip-units($value) { @return $value / ($value * 0 + 1); }

// ---------------------------------------
// Change units
// ---------------------------------------
// Add `$unit` to `$value`
//
// @param {Number} $value - Value to add unit to
// @param {String} $unit - String representation of the unit
//
// @return {number} - `$value` expressed in `$unit`
// @source https://github.com/eduardoboucas/include-media/blob/master/dist/_include-media.scss
// @example
//   padding: ekzo-units(25px, em)

@function ekzo-units($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if not index(map-keys($units), $unit) { @error '[ekzo-unit] invalid unit `#{$unit}`' }

  @return ekzo-strip-units($value) * ekzo-get($units, $unit);
}

// ---------------------------------------
// To percent
// ---------------------------------------
//
// Calculates percentage based on provided values
//
// @param {number:px} $value - value which should be converted into percent
// @param {number:px} $total - value according to which should be calculated percentage
//
// @return {number}

@function ekzo-percent($value, $total) {
  @return $value / $total * 100%;
}

// ---------------------------------------
// To em
// ---------------------------------------
//
// Calculates ems based on provided values
//
// @param {number:px} $value                     - value which should be converted into ems
// @param {number:px} $base=ekzo-font-size(base) - base value according to which should be calculated em value
//
// @return {number}

@function ekzo-em($value, $base:ekzo-font-size(base)) {
  @return ekzo-units($value / $base, em);
}

// ---------------------------------------
// To rem
// ---------------------------------------
//
// Calculates rems based on provided values
//
// @param {number:px} $value                     - value which should be converted into rems
// @param {number:px} $base=ekzo-font-size(base) - base value according to which should be calculated rem value
//
// @return {number}

@function ekzo-rem($value, $base:ekzo-font-size(base)) {
  @return ekzo-units($value / $base, rem);
}

// ---------------------------------------
// Tint & Shade
// ---------------------------------------

// ----
// Tint
//
// Add percentage of white to a color
//
// @param {color}  $color   - The color to be tinted
// @param {number} $percent - The percentage amount the color is to be tinted
//
// @return {color}

@function ekzo-tint($color, $percent) { @return mix(#fff, $color, $percent); }

// -----
// Shade
//
// Add percentage of black to a color
//
// @param {color} $color    - The color to be tinted
// @param {number} $percent - The percentage amount the color is to be shaded
//
// @return {color}

@function ekzo-shade($color, $percent) { @return mix(#000, $color, $percent); }

// -----
// String replace
//
// Replace `$search` with `$replace` in `$string`
//
// @source http://sassmeister.com/gist/1b4f2da5527830088e4d?
//
// @param {string} $string  - string, in which to search
// @param {string} $search  - string to search
// @param {string} $replace - new value
//
// @return {string} - with replaced value

@function str-replace($string, $search, $replace: '') {
  @if type-of($string) != string or type-of($search) != string or type-of($replace) != string {
    @error "[str-replace]: one of the arguments isn't a string.";
  }

  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}