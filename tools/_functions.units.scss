
// =======================================
// ^FUNCTIONS.UNITS
// =======================================

// ---------------------------------------
// Strip units
// ---------------------------------------
// Strip units from `$value`. Do not use it. Ever. Seriously. You don't want to use it.
//
// @param {Number} $value - Value from which should be removed units
//
// @return {number} - Number without units

@function ekzo-strip-units($value) { @return $value / ($value * 0 + 1); }

// ---------------------------------------
// Convert units
// ---------------------------------------
// Intelligently converts one units to other types. Doesn't convert incompitable unit types,
// like `px` to `rems`.
// Use specific mixins if you want to convert some possible-to-be compitable units
// based on base line-height, like `ekzo-rem()` for pxs to rems, or px to ems
//
// @param {Number} $value - Value to add unit to
// @param {String} $unit - String representation of desired unit
//
// @return {number} - `$value` expressed in `$unit`
//
// @throw Error if `$unit` does not exist or if units are incompatible.
//
// @source https://github.com/eduardoboucas/include-media/blob/master/dist/_include-media.scss
// @source http://www.sitepoint.com/understanding-sass-units/
//
// @example
//   padding: ekzo-units(25px, em)

@function ekzo-units($value, $unit) {
  $units: (
    'px': 0px,
    'cm': 0cm,
    'mm': 0mm,
    '%': 0%,
    'pc': 0pc,
    'ch': 0ch,
    'in': 0in,
    'em': 0em,
    'rem': 0rem,
    'pt': 0pt,
    'ex': 0ex,
    'vw': 0vw,
    'vh': 0vh,
    'vmin': 0vmin,
    'vmax': 0vmax,
    'deg': 0deg,
    'turn': 0turn,
    'rad': 0rad,
    'grad': 0grad,
    's': 0s,
    'ms': 0ms,
    'Hz': 0Hz,
    'kHz': 0kHz,
    'dppx': 0dppx,
    'dpcm': 0dpcm,
    'dpi': 0dpi,
  );

  @if not map-has-key($units, $unit) { @error '[ekzo-unit] invalid unit `#{$unit}`' }

  @return ekzo-get($units, $unit) + $value;
}

// ---------------------------------------
// Calculate percent
// ---------------------------------------
//
// Calculates percentage based on provided values
//
// @param {number} $value - value which should be converted into percent
// @param {number} $total - value according to which should be calculated percentage
//
// @return {number}

@function ekzo-percent($value, $total) {
  @return $value / $total * 100%;
}

// ---------------------------------------
// Calculate em
// ---------------------------------------
//
// Calculates ems based on provided values
//
// @param {number:px} $value                     - value which should be converted into ems
// @param {number:px} $base=ekzo-font-size(base) - base value according to which should be calculated em value
//
// @return {number}

@function ekzo-em($value, $base:ekzo-font-size(base)) {
  @return ekzo-units($value / $base, em);
}

// ---------------------------------------
// Calculate rem
// ---------------------------------------
//
// Calculates rems based on provided values
//
// @param {number:px} $value                     - value which should be converted into rems
// @param {number:px} $base=ekzo-font-size(base) - base value according to which should be calculated rem value
//
// @return {number}

@function ekzo-rem($value, $base:ekzo-font-size(base)) {
  @return ekzo-units($value / $base, rem);
}