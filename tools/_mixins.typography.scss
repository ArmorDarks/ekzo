// =======================================
// ^MIXINS.TYPOGRAPHY
// =======================================

// ---------------------------------------
// Line-height mixin
// ---------------------------------------
// Outputs calculated `line-heigt` which ensures that text of specified size takes
// right height to generate proper vertical rhythm
//
//  @param {number} $font-size                          - `font-size` of text
//  @param {number} $base-line-height=$ekzo-line-height - base `line-height` for proper vertical rhythm
//  @param {number} $base-font-size=$ekzo-font-size     - base `font-size` for conversions from ems and rems to pxs
//  @param {bool}   $as-ratio=true                      - Represent result as unitless line-height, or as hard value
//
//  @return Calculated `line-height` ratio
//
//  @throws Error if unit types does not match, since in such case proper calculation is impossible
//
//  @source `line-height` calculation by twitter.com/redclov3r/status/250301539321798657

@mixin ekzo-line-height($font-size, $base-line-height: $ekzo-line-height, $base-font-size: $ekzo-font-size, $as-ratio:true) {
  $font-size: ekzo-units($font-size, unit($base-line-height), $base-font-size);

  @if unit($font-size) != unit($base-line-height) {
    @error '[ekzo-line-height] unit types of `$font-size` and `$base-line-height` should match. You specified `' + unit($font-size) + '` and `' + unit($base-line-height) + '`.';
  }

  $calculated-line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);

  @if not $as-ratio {
    $calculated-line-height: $calculated-line-height * $font-size;
  }

  line-height: $calculated-line-height;
}

// ---------------------------------------
// Font-size mixin
// ---------------------------------------
//
// Create a fully formed type style (font-sizing and vertical rhythm) by passing in single value
// On contrary to `ekzo-font-size()` function, that mixin embending `font-size` and
// caluclated `line-height` into class within which it was called
//
// @param {number|string} $font-size  - Desired `font-size` or font-size name,
//                                      specified in default Ekzo font-sizes map
//                                      or specified one
// @param {string} $type=text         - Group's name of font-size in default or specified map.
//                                      Should be specified only if `$size` set to string
// @param {bool|only|number} $line-height=$ekzo-line-height
//                                    - Should `line-height` rhythm calculation be applied or no.
//                                      Set to number to define custom `line-height`.
// @param {map} $map=$ekzo-font-sizes - In which map mixin should look for `font-size` value
//
// @example
//
//    .heading { @include ekzo-font-size(10px, false, 25px); }
//    .heading { @include ekzo-font-size(h1, headings); }
//    .heading { @include ekzo-font-size(big, my-group, $map:$my-custom-sizes); }

@mixin ekzo-font-size($font-size, $type:text, $line-height:$ekzo-line-height, $map:$ekzo-font-sizes) {
  font-size: if(type-of($font-size) == string, ekzo-font-size($font-size, $type, $map), $font-size);

  @if $line-height {
    @include ekzo-line-height($font-size: $font-size, $base-line-height: $line-height);
  }
}

// ---------------------------------------
// Font-face
// ---------------------------------------
//
// Build proper font-face based on provided parameters
//
// @param {string} $font                   - font name
// @param {number=1|bool(false)} $version  - font version. Ensure reloading of cache in
//                                           case of any changes in font file
// @param {string} $file-name=$font        - should be specified in case of different
//                                           font file name from font name
// @param {number|string} $weight=normal   - `font-weight` of font-face
// @param {string} $style=normal           - `font-style` of font-face
// @param {bool} $svg=$ekzo-use-svg-fonts  - include or no svg version of font (for iOS 5.0 and lower)
// @param {string} $svg-id=$file-name      - should be specified in case it's different
//                                           from font file name
//                                           (can be found in `svg-file -> <font> -> id`)
//
// @example
//
//    @include ekzo-font-face(Helvetica LT Condensed, 1, HelveticaLTCondensed, bold, helvId );
//

@mixin ekzo-font-face($font, $version:1, $file-name:$font, $weight:normal, $style:normal, $svg: $ekzo-use-svg-fonts, $svg-id:$file-name) {
  $version: if($version, '?#' + $version, '');
  $font-path: $ekzo-fonts-path + '/' + $file-name;

  @font-face {
    font-family: $font;

    src: url($font-path + '.eot' + $version);
    src: url($font-path + '.eot' + $version + '#iefix') format('embedded-opentype'),
         url($font-path + '.woff' + $version)           format('woff'),
         url($font-path + '.ttf' + $version)            format('truetype')
         #{if($svg, ', url(' + $font-path + '.svg' + $version + '#' + $svg-id + ') format(\'svg\')', '')};

    font-weight:  $weight;
    font-style:   $style;
    font-display: swap;
  }
}