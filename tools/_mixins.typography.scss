
// =======================================
// ^MIXINS.TYPOGRAPHY
// =======================================

// ---------------------------------------
// Line-height mixin
// ---------------------------------------
// Outputs calculated `line-heigt` which ensures that text of specified size takes
// right height to generate proper vertical rhythm
//
//  @param {number} $font-size                          - `font-size` of text
//  @param {number} $base-line-height=$ekzo-line-height - base `line-height` for proper vertical rhythm
//  @param {bool}   $as-ratio=true                      - Represent result as unitless line-height, or as hard value
//
//  @return Calculated `line-height` ratio
//
//  @throws Error if unit types does not match, since in such case proper calculation is impossible
//
//  @source `line-height` calculation by twitter.com/redclov3r/status/250301539321798657

@mixin ekzo-line-height($font-size, $base-line-height: $ekzo-line-height, $as-ratio:true) {

  $font-size-units: unit($font-size);
  $base-line-height-units: unit($base-line-height);

  @if $font-size-units != $base-line-height-units {
    @error '[ekzo-line-height] unit types of `$font-size` and `$base-line-height` should match. You specified `' + $font-size-units + '` and `' + $base-line-height-units + '`.'
  }

  $calculated-line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);

  @if not $as-ratio {
    $calculated-line-height: $calculated-line-height * $font-size;
  }

  line-height: $calculated-line-height;

}

// ---------------------------------------
// Font-size mixin
// ---------------------------------------
//
// Create a fully formed type style (font-sizing and vertical rhythm) by passing in single value
// On contrary to `ekzo-font-size()` function, that mixin embending `font-size` and
// caluclated `line-height` into class within which it was called
//
// @param {number|string} $font-size           - Desired `font-size` or font-size name,
//                                               specified in default Ekzo font-sizes map
//                                               or specified one
// @param {string} $type=text                  - Group's name of font-size in default or specified map.
//                                               Should be specified only if `$size` set to string
// @param {bool|only|number} $line-height=true - Should `line-height` rhythm calculation be applied or no.
//                                               Set to number to define custom `line-height`.
//                                               Set to `only` to output only `line-height`
// @param {map} $map=$ekzo-font-sizes          - In which map mixin should look for `font-size` value
//
// @example
//
//    .heading { @include ekzo-font-size(10px, false, 25px); }
//    .heading { @include ekzo-font-size(h1, headings); }
//    .heading { @include ekzo-font-size(big, my-group, $map:$my-custom-sizes); }

@mixin ekzo-font-size($font-size, $type:text, $line-height:true, $map:$ekzo-font-sizes) {

  @if type-of($font-size) == string {
    $font-size: ekzo-font-size($font-size, $type, $map);
  }

  // Use base Ekzo line-height if set to `true`
  @if $line-height == true or $line-height == only { $line-height: $ekzo-line-height; }

  @if $line-height not only { font-size: $font-size; }
  @if $line-height          { @include ekzo-line-height($font-size: $font-size, $base-line-height: $line-height); }

}

// ---------------------------------------
// Font-size class
// ---------------------------------------
//
// Gets value from specified or predefined map and build class
// with font sizes based on specified in that map name and value
//
// @param {string} $type          - Name of group in specified map
// @param {string} $name          - Name of particular font size in specified map
// @param {bool|px} $line-height=true
//                                - Should `line-height` rhythm calculation be applied or no.
//                                  Set to number in pixels to define custom `line-height`.
// @param {boolean|'include'} $element-selector=false
//                                - Whether selector shouid be outputed as class, as
//                                  general selector (like `h1`, without dot) or as both (if set to `include`).
// @param {string} $prefix=false  - Should class name be prefixed or no.
//                                  Ignored if `$element-selector` set to `true`
// @param {string} $postfix=false - Should to class name be added postfix or no.
//                                  Ignored if `$element-selector` set to `true`
// @param {map} $map=$ekzo-font-sizes
//                                - Should mixin search for font sizes in default, or specified map
//                                  ```
//                                  $example: (
//                                    headings: ( h1: 36px )
//                                  );
//                                  ```
//
// @example
//
//  @include ekzo-font-size-class(headings, h1) { border: 1px; };

@mixin ekzo-font-size-class($type, $name, $line-height:true, $element-selector:false, $prefix:false, $postfix:false, $map:$ekzo-font-sizes) {

  $working-map: null;
  $class:       null;

  @if not $prefix { $prefix: '' }
  @if not $postfix { $postfix: '' }

  @if map-has-key($map, $type) {
    $working-map: map-get($map, $type);
  } @else {
    @error '[ekzo-font-size-class]: no such `#{$type}` font type in specified map!';
  }

  @if map-has-key($working-map, $name) {

    $value: map-get($working-map, $name);

    @if str-index($name, \+) == 1 or str-index($name, '-') == 1 or str-index($name, 'base') {
      @if $prefix != true and $prefix != null and $prefix != '' {
        // @todo This is very crude way to fix bug. Works solely on assumption that all prefixes
        //       carrying `--` in the end (expecting modificator)
        $prefix: str-slice($prefix, 0, str-length($prefix) - 2);
        // $prefix: str-replace($prefix, '--', '');
        @if $name == 'base' { $name: '' }
      }
    }

    @if $element-selector == include {
      $class: '#{$name}, .#{$prefix}#{$name}#{$postfix}';
    } @else if $element-selector {
      $class: $name;
    } @else {
      $class: '.#{$prefix}#{$name}#{$postfix}';
    }

    #{$class} {
      @include ekzo-font-size($value, $line-height:$line-height);
      @content
    }

  } @else {
    @error '[ekzo-font-size-class]: no such `#{$name}` font name in specified map!';
  }

}

// ---------------------------------------
// Font-sizes classes
// ---------------------------------------
//
// Iterate through specified or predefined map and build series of classes
// with font sizes based on specified in that map names and values
//
// @param {string} $type          - Name of group in specified map
// @param {bool|px} $line-height=true
//                                - Should `line-height` rhythm calculation be applied or no.
//                                  Set to number in pixels to define custom `line-height`.
// @param {boolean|'include'} $element-selector=false
//                                - Whether selector shouid be outputed as class, as
//                                  general selector (like `h1`, without dot) or as both (if set to `include`).
// @param {string} $prefix=false  - Should class name be prefixed or no.
//                                  Ignored if `$element-selector` set to `true`
// @param {string} $postfix=false - Should to class name be added postfix or no.
//                                  Ignored if `$element-selector` set to `true`
// @param {map} $map=$ekzo-font-sizes
//                                - Should mixin search for font sizes in default, or specified map
//                                  ```
//                                  $example: (
//                                    headings: ( h1: 36px )
//                                  );
//                                  ```
//
// @example
//
//  @include ekzo-font-size-classes(fonts, $element-selector:false, $prefix:'text--') { border: 1px; };

@mixin ekzo-font-size-classes($type, $line-height:true, $element-selector:false, $prefix:'', $postfix:'', $map:$ekzo-font-sizes) {

  $working-map: null;

  @if map-has-key($map, $type) {
    $working-map: map-get($map, $type);
  } @else {
    @error '[ekzo-font-size-classes]: no such `#{$type}` font type in specified map!';
  }

  @each $name, $value in $working-map {

    @include ekzo-font-size-class($type, $name, $line-height, $element-selector, $prefix, $postfix, $map) {
      @content
    }

  }

}

// ---------------------------------------
// Font-face
// ---------------------------------------
//
// Build proper font-face based on provided parameters
//
// @param {string} $font                   - font name
// @param {number=1|bool(false)} $version  - font version. Ensure reloading of cache in
//                                           case of any changes in font file
// @param {string} $file-name=$font        - should be specified in case of different
//                                           font file name from font name
// @param {number|string} $weight=normal   - `font-weight` of font-face
// @param {string} $style=normal           - `font-style` of font-face
// @param {bool} $svg=$ekzo-use-svg-fonts  - include or no svg version of font (for iOS 5.0 and lower)
// @param {string} $svg-id=$file-name      - should be specified in case it's different
//                                           from font file name
//                                           (can be found in `svg-file -> <font> -> id`)
//
// @example
//
//    @include ekzo-font-face(Helvetica LT Condensed, 1, HelveticaLTCondensed, bold, helvId );
//

@mixin ekzo-font-face($font, $version:1, $file-name:$font, $weight:normal, $style:normal, $svg: $ekzo-use-svg-fonts, $svg-id:$file-name) {

  @if $version { $version: '?#' + $version; } @else { $version: ''; }

  @font-face {
    font-family: $font;

    src: url($ekzo-fonts-path + '/' + $file-name + '.eot'  + $version);
    src: url($ekzo-fonts-path + '/' + $file-name + '.eot'  + $version + '#iefix')                           format('embedded-opentype'),
         url($ekzo-fonts-path + '/' + $file-name + '.woff' + $version)                                      format('woff'),
         url($ekzo-fonts-path + '/' + $file-name + '.ttf'  + $version)                                      format('truetype')
         #{if($svg, ', url(' + $ekzo-fonts-path + '/' + $file-name + '.svg' + $version + '#' + $svg-id + ') format(\'svg\')', '')};

    font-weight: $weight;
    font-style:  $style;
  }

}