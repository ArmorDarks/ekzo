@import './units';

// =============================================================================
// Typography
// =============================================================================

// -----------------------------------------------------------------------------
// Get line-height
// -----------------------------------------------------------------------------

@function ekzo-line-height ($line-height-name) {
  $value: map-get($ekzo-line-heights, $line-height-name);

  @if $value == false {
    @return null;
  }

  @if not $value {
    @error '[ekzo-lh]: no such line-height key: #{$line-height-name}';
  }

  @return $value;
}

///
// Outputs calculated `line-heigt` which ensures that text of specified size takes
// right height to generate proper vertical rhythm
//
//  @param {number} $font-size                             - `font-size` of text
//  @param {number} $base-line-height=ekzo-line-height('') - base `line-height` for proper vertical rhythm
//  @param {number} $base-font-size=$ekzo-font-size        - base `font-size` for conversions from ems and rems to pxs
//  @param {bool}   $as-ratio=true                         - Represent result as unitless line-height, or as hard value
//  @return Calculated `line-height` ratio
//  @throws Error if unit types does not match, since in such case proper calculation is impossible
//  @source `line-height` calculation by twitter.com/redclov3r/status/250301539321798657
///
@mixin ekzo-line-height (
  $font-size,
  $base-line-height: ekzo-line-height(''),
  $base-font-size: $ekzo-font-size,
  $as-ratio: true
) {
  $font-size: ekzo-units($font-size, unit($base-line-height), $base-font-size);

  @if unit($font-size) != unit($base-line-height) {
    @error '[ekzo-line-height] unit types of `$font-size` and `$base-line-height` should match. You specified `' + unit($font-size) + '` and `' + unit($base-line-height) + '`.';
  }

  $calculated-line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);

  @if not $as-ratio {
    $calculated-line-height: $calculated-line-height * $font-size;
  }

  line-height: $calculated-line-height;
}

// -----------------------------------------------------------------------------
// Output font size
// -----------------------------------------------------------------------------
//
// Shorthand function to call quickly values from default
// `$ekzo-font-sizes` or specified map with set of font sizes values
//
// @param {string} $name         - font name, specified in default font sizes map
//                                 or specified one
// @param {string} $type=text   - group's name of font in default or specified map
// @param {map} $map=$font-sizes - should mixin search for font sizes in default,
//                                 or specified map
//                                 See `font-size-class()` mixin for details about format
//
// @example
//
//    .heading { font-size: ekzo-font-size(h1, headings); }
//    .heading { font-size: (big, my-group, $map:$my-custom-sizes); }

@function ekzo-font-size (
  $name,
  $type: text,
  $map: $ekzo-font-sizes
) {
  $value: null;

  @if map-has-key($map, $type) {
    $working-map: map-get($map, $type);

    @if map-has-key($working-map, $name) {
      $value: map-get($working-map, $name);
    }

    @else {
      @error 'No such `#{$name}` font name in specified map!';
    }
  }

  @else {
    @error 'No such `#{$type}` font type in specified map!';
  }

  @return $value;
}

///
// Create a fully formed type style (font-sizing and vertical rhythm) by passing in single value
// On contrary to `ekzo-font-size()` function, that mixin embending `font-size` and
// caluclated `line-height` into class within which it was called
//
// @param {number|string} $font-size  - Desired `font-size` or font-size name,
//                                      specified in default Ekzo font-sizes map
//                                      or specified one
// @param {string} $type=text         - Group's name of font-size in default or specified map.
//                                      Should be specified only if `$size` set to string
// @param {bool|only|number} $line-height=ekzo-line-height('')
//                                    - Should `line-height` rhythm calculation be applied or no.
//                                      Set to number to define custom `line-height`.
// @param {map} $map=$ekzo-font-sizes - In which map mixin should look for `font-size` value
//
// @example
//  .heading { @include ekzo-font-size(10px, false, 25px); }
//  .heading { @include ekzo-font-size(h1, headings); }
//  .heading { @include ekzo-font-size(big, my-group, $map:$my-custom-sizes); }
///
@mixin ekzo-font-size (
  $font-size,
  $type: text,
  $line-height: ekzo-line-height(''),
  $map:$ekzo-font-sizes
) {
  $font-size: if(type-of($font-size) == string, ekzo-font-size($font-size, $type, $map), $font-size);

  font-size: $font-size;

  @if $line-height {
    @include ekzo-line-height($font-size: $font-size, $base-line-height: $line-height);
  }
}

// -----------------------------------------------------------------------------
// Get font-family
// -----------------------------------------------------------------------------

@function ekzo-font-family (
  $font-family-name,
  $map: $ekzo-font-families
) {
  $value: map-get($map, $font-family-name);

  @if $value == false {
    @return null;
  }

  @if not $value {
    @error '[ekzo-font-family]: no such key: #{$font-family-name}';
  }

  @return unquote($value);
}

// -----------------------------------------------------------------------------
// Get element font-family
// -----------------------------------------------------------------------------

@function ekzo-ui-font-family (
  $font-family-name,
  $map: $ekzo-ui-font-families
) {
  $value: map-get($map, $font-family-name);

  @if $value == false {
    @return null;
  }

  @if not $value and $value != false {
    @error '[ekzo-ui-font-family]: no such key: #{$font-family-name}';
  }

  @return unquote($value);
}

///
// Build `@font-face` based on provided parameters
//
// @param {string}        $font             `font-family` value
// @param {string}        $path             Full path to the font file without extension
// @param {number|false}  [$version:false]  Font version
// @param {number|string} [$weight:normal] `font-weight` value
// @param {string}        [$style:normal]  `font-style` value
//
// @example
//   @include ekzo-font-face(Helvetica LT Condensed, assets/HelveticaLTCondensed, 123);
///
@mixin ekzo-font-face (
  $font,
  $path,
  $version: false,
  $weight: normal,
  $style: normal
) {
  $version: if($version, '?##{$version}', '');

  @font-face {
    font-family: $font;

    src: url('#{$path}.eot#{$version}');
    src:
      url('#{$path}.eot#{$version}#iefix') format('embedded-opentype'),
      url('#{$path}.woff#{$version}') format('woff'),
      url('#{$path}.ttf#{$version}') format('truetype');

    font-weight: $weight;
    font-style: $style;
    font-display: swap;
  }
}